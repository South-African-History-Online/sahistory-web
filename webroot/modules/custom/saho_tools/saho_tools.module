<?php

/**
 * @file
 * Contains hook implementations for the SAHO Tools module.
 */

use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\node\NodeInterface;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Url;

/**
 * Implements hook_help().
 */
function saho_tools_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    case 'help.page.saho_tools':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('The SAHO Tools module provides functionality for the Tools dropdown, including citation generation.') . '</p>';
      return $output;
  }
}

/**
 * Implements hook_page_attachments_alter().
 */
function saho_tools_page_attachments_alter(array &$attachments) {
  // Check if we're on an admin route
  $is_admin = \Drupal::service('router.admin_context')->isAdminRoute();
  
  // Only attach the citation library on non-admin routes
  if (!$is_admin) {
    $attachments['#attached']['library'][] = 'saho_tools/citation';
    
    // Add debugging information to check if the library is loaded
    $attachments['#attached']['drupalSettings']['sahoTools']['debug'] = [
      'libraryLoaded' => TRUE,
      'timestamp' => time(),
    ];
    
    // If we're on a node page, add node data
    $node = \Drupal::routeMatch()->getParameter('node');
    if ($node instanceof NodeInterface) {
      // Add node data as drupalSettings for JavaScript.
      $node_data = [
        'nid' => $node->id(),
        'title' => $node->getTitle(),
        'type' => $node->getType(),
        'created' => $node->getCreatedTime(),
        'changed' => $node->getChangedTime(),
        'url' => $node->toUrl()->setAbsolute()->toString(),
      ];
      
      // Add author information if available.
      if ($node->hasField('field_article_author') && !$node->get('field_article_author')->isEmpty()) {
        $node_data['author'] = $node->get('field_article_author')->value;
      }
      elseif ($node->getOwner()) {
        $node_data['author'] = $node->getOwner()->getDisplayName();
      }
      
      $attachments['#attached']['drupalSettings']['sahoTools']['nodeData'] = $node_data;
    }
    else {
      // For non-node pages, add basic page data
      $current_url = \Drupal::request()->getUri();
      $site_name = \Drupal::config('system.site')->get('name');
      $page_title = \Drupal::service('title_resolver')->getTitle(
        \Drupal::request(),
        \Drupal::routeMatch()->getRouteObject()
      );
      
      $page_data = [
        'title' => $page_title ?: 'Page',
        'url' => $current_url,
        'site_name' => $site_name,
      ];
      
      $attachments['#attached']['drupalSettings']['sahoTools']['pageData'] = $page_data;
    }
  }
}

/**
 * Implements hook_preprocess_html().
 */
function saho_tools_preprocess_html(&$variables) {
  // Check if we're on an admin route
  $is_admin = \Drupal::service('router.admin_context')->isAdminRoute();
  
  // Only add the citation modal container on non-admin routes
  if (!$is_admin) {
    // Add citation modal
    $variables['page_bottom']['citation_modal'] = [
      '#type' => 'html_tag',
      '#tag' => 'div',
      '#attributes' => [
        'id' => 'citation-modal',
        'class' => ['modal', 'fade'],
        'tabindex' => '-1',
        'aria-labelledby' => 'citation-modal-label',
        'aria-hidden' => 'true',
      ],
      '#value' => '<div class="modal-dialog modal-dialog-centered">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title" id="citation-modal-label">Cite This Page</h5>
        </div>
        <div class="modal-body">
          <div class="citation-image-container"></div>
          <div class="citation-formats">
            <div class="citation-format mb-4">
              <h4>APA (7th edition)</h4>
              <div class="citation-content apa-citation">
                <button type="button" class="btn btn-sm btn-outline-secondary copy-individual" data-format="apa">Copy APA Citation</button>
              </div>
            </div>
            <div class="citation-format mb-4">
              <h4>Oxford (Footnote style)</h4>
              <div class="citation-content oxford-citation">
                <button type="button" class="btn btn-sm btn-outline-secondary copy-individual" data-format="oxford">Copy Oxford Citation</button>
              </div>
            </div>
            <div class="citation-format">
              <h4>Harvard</h4>
              <div class="citation-content harvard-citation">
                <button type="button" class="btn btn-sm btn-outline-secondary copy-individual" data-format="harvard">Copy Harvard Citation</button>
              </div>
            </div>
            <div class="citation-format citation-resources text-center mt-4">
              <a href="/content/referencing-resources-historical-research" class="btn btn-danger" target="_blank" rel="noopener noreferrer">Referencing Resources for Historical Research</a>
            </div>
          </div>
        </div>
      </div>
    </div>',
    ];
    
    // Add sharing modal
    // Get the current node for description if available
    $node = \Drupal::routeMatch()->getParameter('node');
    $description = '';
    if ($node instanceof NodeInterface && $node->hasField('body') && !$node->get('body')->isEmpty()) {
      // Get a short excerpt from the body for the description
      $body_value = $node->get('body')->value;
      $description = strip_tags($body_value);
      // Limit to 150 characters
      if (strlen($description) > 150) {
        $description = substr($description, 0, 150) . '...';
      }
    }
    
    // Create a render array for the sharing buttons with improved configuration
    $sharing_buttons = [
      '#theme' => 'better_social_sharing_buttons',
      '#services' => \Drupal::config('better_social_sharing_buttons.settings')->get('services'),
      '#width' => '36',  // Larger icons for better visibility
      '#radius' => '8',  // Rounded corners
      '#facebook_app_id' => \Drupal::config('better_social_sharing_buttons.settings')->get('facebook_app_id'),
      '#iconset' => 'social-icons--square',  // Use square icons for better visibility
      '#print_css' => TRUE,
      '#page_url' => \Drupal::request()->getUri(),
      '#title' => \Drupal::service('title_resolver')->getTitle(\Drupal::request(), \Drupal::routeMatch()->getRouteObject()),
      '#description' => $description,
      '#base_url' => \Drupal::request()->getSchemeAndHttpHost(),
    ];
    
    // Render the sharing buttons using renderPlain to avoid nested render context issues
    $rendered_sharing_buttons = \Drupal::service('renderer')->renderPlain($sharing_buttons);
    
    $variables['page_bottom']['sharing_modal'] = [
      '#type' => 'html_tag',
      '#tag' => 'div',
      '#attributes' => [
        'id' => 'sharing-modal',
        'class' => ['modal', 'fade'],
        'tabindex' => '-1',
        'aria-labelledby' => 'sharing-modal-label',
        'aria-hidden' => 'true',
      ],
      '#value' => '<div class="modal-dialog modal-dialog-centered">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title" id="sharing-modal-label">Share This Page</h5>
          <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
        </div>
        <div class="modal-body">
          <p class="text-center mb-4">Share this page with your friends and colleagues:</p>
          <div id="sharing-buttons-container" class="text-center">
            ' . $rendered_sharing_buttons . '
          </div>
        </div>
      </div>
    </div>',
      '#attached' => [
        'library' => [
          'saho_tools/sharing',
          'better_social_sharing_buttons/styling',
        ],
      ],
    ];
  }
}

/**
 * Implements hook_page_attachments().
 */
function saho_tools_page_attachments(array &$attachments) {
  // Check if we're on an admin route
  $is_admin = \Drupal::service('router.admin_context')->isAdminRoute();
  
  // Only add the script to modify the Cite This Page link on non-admin routes
  if (!$is_admin) {
    // Add inline script to modify the Cite This Page link.
    $attachments['#attached']['html_head'][] = [
      [
        '#type' => 'html_tag',
        '#tag' => 'script',
        '#value' => "
          document.addEventListener('DOMContentLoaded', function() {
            var citeLinks = document.querySelectorAll('a[href=\"#cite\"]');
            citeLinks.forEach(function(link) {
              link.setAttribute('data-citation-trigger', 'true');
              link.setAttribute('href', 'javascript:void(0);');
            });
          });
        ",
      ],
      'saho_tools_cite_link_modifier',
    ];
  }
}

/**
 * Implements hook_preprocess_node().
 */
function saho_tools_preprocess_node(&$variables) {
  // Add citation data to the node template.
  $node = $variables['node'];
  
  // Only proceed if we're viewing a full node.
  if ($variables['view_mode'] == 'full') {
    // Add citation data as attributes for potential use in templates.
    $variables['attributes']['data-citation-title'] = $node->getTitle();
    $variables['attributes']['data-citation-url'] = $node->toUrl()->setAbsolute()->toString();
    $variables['attributes']['data-citation-date'] = date('Y-m-d', $node->getChangedTime());
    
    // Add author information if available.
    if ($node->hasField('field_article_author') && !$node->get('field_article_author')->isEmpty()) {
      $variables['attributes']['data-citation-author'] = $node->get('field_article_author')->value;
    }
    elseif ($node->getOwner()) {
      $variables['attributes']['data-citation-author'] = $node->getOwner()->getDisplayName();
    }
    else {
      $variables['attributes']['data-citation-author'] = 'South African History Online';
    }
    
    // Add the citation button to the node template.
    $variables['citation_button'] = [
      '#theme' => 'citation_button',
      '#attributes' => [
        'class' => ['citation-button', 'btn', 'btn-sm', 'btn-outline-primary'],
        'data-citation-trigger' => 'true',
      ],
      '#title' => t('Cite This Page'),
      '#attached' => [
        'library' => ['saho_tools/citation'],
      ],
    ];
    
    // Add the sharing button to the node template.
    $variables['sharing_button'] = [
      '#theme' => 'sharing_button',
      '#attributes' => [
        'class' => ['sharing-button', 'btn', 'btn-sm', 'btn-outline-success'],
        'data-sharing-trigger' => 'true',
      ],
      '#title' => t('Share'),
      '#attached' => [
        'library' => ['saho_tools/sharing'],
      ],
    ];
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter() for node templates.
 */
function saho_tools_theme_suggestions_node_alter(array &$suggestions, array $variables) {
  // Add a theme suggestion for each content type.
  $node = $variables['elements']['#node'];
  $sanitized_view_mode = strtr($variables['elements']['#view_mode'], '.', '_');
  
  // Add a suggestion for the view mode and content type.
  $suggestions[] = 'node__' . $sanitized_view_mode . '__' . $node->bundle();
}

/**
 * Implements hook_theme().
 */
function saho_tools_theme() {
  return [
    'citation_button' => [
      'variables' => [
        'attributes' => [],
        'title' => 'Cite This Page',
      ],
      'template' => 'citation-button',
    ],
    'sharing_button' => [
      'variables' => [
        'attributes' => [],
        'title' => 'Share',
      ],
      'template' => 'sharing-button',
    ],
    'citation_formatter_all' => [
      'variables' => [
        'citations' => NULL,
      ],
      'template' => 'citation-formatter-all',
    ],
    'citation_formatter_single' => [
      'variables' => [
        'citation' => NULL,
        'format' => NULL,
      ],
      'template' => 'citation-formatter-single',
    ],
    'node__citation' => [
      'variables' => [
        'citation_button' => NULL,
      ],
      'template' => 'node--citation',
    ],
  ];
}