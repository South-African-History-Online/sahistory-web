{#
/**
 * @file
 * Theme override to display a teaser view of an upcoming event node.
 *
 * Available variables:
 * - node: The node entity with limited access to object properties and methods.
 * - label: (optional) The title of the node.
 * - content: All node items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}.
 * - author_picture: The node author user entity, rendered using the "compact"
 *   view mode.
 * - metadata: Metadata for this node.
 * - date: (optional) Themed creation date.
 * - author_name: (optional) Themed author name.
 * - url: Direct URL of the current node.
 * - display_submitted: Whether submission information should be displayed.
 * - attributes: HTML attributes for the containing element.
 * - title_attributes: Same as attributes, except applied to the main title
 *   tag that appears in the template.
 * - content_attributes: Same as attributes, except applied to the main
 *   content tag that appears in the template.
 * - author_attributes: Same as attributes, except applied to the author of
 *   the node tag that appears in the template.
 * - title_prefix: Additional output populated by modules, intended to be
 *   displayed in front of the view title.
 * - title_suffix: Additional output populated by modules, intended to be
 *   displayed after the view title.
 * - view_mode: View mode; for example, "teaser" or "full".
 * - teaser: Flag for the teaser state. Will be true if view_mode is 'teaser'.
 * - page: Flag for the full page state. Will be true if view_mode is 'full'.
 * - readmore: Flag for more state. Will be true if the teaser content of the
 *   node cannot hold the main body content.
 * - logged_in: Flag for authenticated user status. Will be true when the
 *   current user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user
 *   is an administrator.
 */
#}
{%
  set classes = [
    'node',
    'node--type-' ~ node.bundle|clean_class,
    node.isPromoted() ? 'node--promoted',
    node.isSticky() ? 'node--sticky',
    not node.isPublished() ? 'node--unpublished',
    view_mode ? 'node--view-mode-' ~ view_mode|clean_class,
    'event-card-clickable'
  ]
%}
<article{{ attributes.addClass(classes) }}>
  
  {# Event Image #}
  {% if content.field_featured_image|render|striptags|trim %}
    <div class="event-card__image">
      {{ content.field_featured_image }}
    </div>
  {% endif %}

  <div class="event-card__content">
    {# Event Title #}
    {{ title_prefix }}
    {% if label %}
      <h2{{ title_attributes.addClass('event-card__title') }}>
        <a href="{{ url }}" rel="bookmark">{{ label }}</a>
      </h2>
    {% endif %}
    {{ title_suffix }}

    {# Event Meta Information #}
    <div class="event-card__meta">
      {# Start Date #}
      {% if content.field_start_date|render|striptags|trim %}
        <div class="event-card__date">
          {{ content.field_start_date }}
        </div>
      {% endif %}

      {# Venue #}
      {% if content.field_venue|render|striptags|trim %}
        <div class="event-card__venue">
          {{ content.field_venue }}
        </div>
      {% endif %}
    </div>

    {# Event Description/Body #}
    {% if content.body|render|striptags|trim %}
      <div class="event-card__excerpt">
        {{ content.body }}
      </div>
    {% endif %}

    {# Call to Action Button #}
    <div class="event-card__action">
      <a href="{{ url }}" class="event-card__button">
        Learn More
        <span class="event-card__button-arrow">â†’</span>
      </a>
    </div>
  </div>

</article>