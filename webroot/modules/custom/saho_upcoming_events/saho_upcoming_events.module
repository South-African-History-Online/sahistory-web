<?php

/**
 * @file
 * Primary module hooks for SAHO Upcoming Events module.
 */

/**
 * Implements hook_help().
 */
function saho_upcoming_events_help($route_name) {
  switch ($route_name) {
    case 'help.page.saho_upcoming_events':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('The SAHO Upcoming Events module provides functionality to display upcoming events on the front page.') . '</p>';
      return $output;
  }
}

/**
 * Implements hook_theme().
 */
function saho_upcoming_events_theme() {
  return [
    'saho_upcoming_events_block' => [
      'variables' => [
        'events' => [],
        'config' => [],
      ],
      'template' => 'saho-upcoming-events-block',
    ],
  ];
}

/**
 * Implements hook_preprocess_HOOK() for views_view.
 */
function saho_upcoming_events_preprocess_views_view(&$variables) {
  $view = $variables['view'];

  // Add CSS for all upcoming events view.
  if ($view->id() == 'all_upcoming_events') {
    $variables['#attached']['library'][] = 'saho_upcoming_events/upcoming_events';

    // Separate events into upcoming and past.
    // Use start of today in SAST timezone for comparison.
    $current_date = new \DateTime('today', new \DateTimeZone('Africa/Johannesburg'));
    $upcoming_rows = [];
    $past_rows = [];

    $view_builder = \Drupal::entityTypeManager()->getViewBuilder('node');
    $renderer = \Drupal::service('renderer');

    foreach ($view->result as $row) {
      $node = $row->_entity;
      if ($node && $node->hasField('field_start_date') && !$node->get('field_start_date')->isEmpty()) {
        $start_date = $node->get('field_start_date')->date;
        $end_date = NULL;

        if ($node->hasField('field_end_date') && !$node->get('field_end_date')->isEmpty()) {
          $end_date = $node->get('field_end_date')->date;
        }

        // Determine event status - use end date if available, else start date.
        $comparison_date = $end_date ?? $start_date;

        // Convert to SAST timezone and compare dates only.
        $comparison_date->setTimezone(new \DateTimeZone('Africa/Johannesburg'));
        $comparison_date_only = new \DateTime($comparison_date->format('Y-m-d'), new \DateTimeZone('Africa/Johannesburg'));

        // Render the node in teaser view mode.
        $build = $view_builder->view($node, 'teaser');
        $rendered = $renderer->render($build);

        // Event is upcoming if end date is today or in the future.
        if ($comparison_date_only >= $current_date) {
          $upcoming_rows[] = ['#markup' => $rendered];
        }
        else {
          $past_rows[] = ['#markup' => $rendered];
        }
      }
    }

    $variables['upcoming_events'] = $upcoming_rows;
    $variables['past_events'] = $past_rows;
    $variables['has_upcoming'] = !empty($upcoming_rows);
    $variables['has_past'] = !empty($past_rows);
  }
}

/**
 * Implements hook_preprocess_HOOK() for node.
 */
function saho_upcoming_events_preprocess_node(&$variables) {
  $node = $variables['node'];

  // Add event status for upcoming events.
  if ($node->getType() === 'upcomingevent' && $variables['view_mode'] === 'teaser') {
    $current_date = new \DateTime('now', new \DateTimeZone('Africa/Johannesburg'));

    if ($node->hasField('field_start_date') && !$node->get('field_start_date')->isEmpty()) {
      $start_date = $node->get('field_start_date')->date;
      $end_date = NULL;

      if ($node->hasField('field_end_date') && !$node->get('field_end_date')->isEmpty()) {
        $end_date = $node->get('field_end_date')->date;
      }

      // Determine event status.
      if ($start_date > $current_date) {
        $variables['event_status'] = 'upcoming';
        $variables['event_status_label'] = t('Upcoming');

        // Calculate days until event.
        $interval = $current_date->diff($start_date);
        $days = $interval->days;

        if ($days === 0) {
          $variables['countdown'] = t('Today');
        }
        elseif ($days === 1) {
          $variables['countdown'] = t('Tomorrow');
        }
        elseif ($days <= 30) {
          $variables['countdown'] = t('In @days days', ['@days' => $days]);
        }
      }
      elseif ($end_date && $end_date >= $current_date && $start_date <= $current_date) {
        $variables['event_status'] = 'in-progress';
        $variables['event_status_label'] = t('Happening Now');
      }
      else {
        $variables['event_status'] = 'past';
        $variables['event_status_label'] = t('Past Event');
      }
    }
  }
}
