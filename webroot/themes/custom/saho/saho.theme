<?php

use Drupal\node\Entity\Node;
use Drupal\Core\Datetime\DateFormatter;

/**
 * @file
 * Theme functions.
 */

// Include all files from the includes directory.
$includes_path = dirname(__FILE__) . '/includes/*.theme';
foreach (glob($includes_path) as $file) {
  require_once dirname(__FILE__) . '/includes/' . basename($file);
}

/**
 * Implements hook_preprocess_block().
 */
function saho_preprocess_block(&$variables) {
  if ($variables['plugin_id'] === 'inline_block:tdih') {
    $variables['tdih_nodes'] = [];
  
    // Safely get the raw boolean value for the manual override field.
    $manual_override = !empty($variables['content']['field_use_manual_override']['#items'][0]) &&
      (bool) $variables['content']['field_use_manual_override']['#items'][0]->value;
  
    // Get the manually selected entity, if any.
    $manual_entity = !empty($variables['content']['field_manual_entity']['#items'][0]) 
      ? $variables['content']['field_manual_entity']['#items'][0] 
      : NULL;
  
    // Get intro text.
    $intro_text = !empty($variables['content']['field_intro_text']['#items'][0]) 
      ? $variables['content']['field_intro_text']['#items'][0]->value 
      : '';
  
    $variables['intro_text'] = $intro_text; // Pass the intro text to the template.
  
    $node = NULL;
  
    if ($manual_override && $manual_entity) {
      // Use the manually selected node.
      $node = \Drupal\node\Entity\Node::load($manual_entity->getValue()['target_id']);
    } else {
      // Automated selection based on today's date.
      $today = new \DateTime('now', new \DateTimeZone('UTC'));
      $day = $today->format('d');
      $month = $today->format('m');
  
      // Query nodes matching today's date.
      $query = \Drupal::entityQuery('node')
        ->condition('status', 1)
        ->condition('type', 'event')
        ->condition('field_this_day_in_history_3', "%-$month-$day", 'LIKE')
        ->condition('field_home_page_feature', 1) // Boolean field indicating front-page feature.
        ->accessCheck(TRUE)
        ->execute();
  
      if (!empty($query)) {
        $nids = array_values($query);
  
        // Randomize the selection for each page load.
        $nid = $nids[array_rand($nids)];
        $node = \Drupal\node\Entity\Node::load($nid);
      }
    }
  
    if (!empty($node)) {
      $image_url = '';
  
      // Directly get the image URL from the node field.
      if ($node->hasField('field_event_image') && !$node->get('field_event_image')->isEmpty()) {
        $file = $node->get('field_event_image')->entity;
        if ($file) {
          $image_url = \Drupal::service('file_url_generator')->generateAbsoluteString($file->getFileUri());
        }
      }
  
      // Use the ViewBuilder to render the entity in the 'teaser' view mode.
      $view_builder = \Drupal::entityTypeManager()->getViewBuilder('node');
      $rendered_entity = $view_builder->view($node, 'teaser');
  
      // Pass the rendered entity to the template.
      $variables['tdih_nodes'][] = [
        'rendered' => $rendered_entity, // Rendered teaser view.
        'id' => $node->id(),
        'title' => $node->getTitle(),
        'url' => $node->toUrl()->toString(),
        'image' => $image_url, // Image URL fetched directly from the node field.
        'date' => $node->get('field_this_day_in_history_3')->value ?? '',
      ];
    }
  
  // Add cache settings.
  $variables['#cache']['contexts'][] = 'timezone';
  $variables['#cache']['max-age'] = 60; // Cache for 1 minute.
  }
  
  // Process the History Pictures block.
  // Check for the specific block type.
  if ($variables['base_plugin_id'] == 'block_content' && $variables['derivative_plugin_id'] == 'inline_block:history_in_pictures') {

    // Intro text.
    $variables['intro_text'] = $variables['content']['field_intro_text']['#items'][0]->value ?? '';

    // Carousel items.
    $variables['carousel_items'] = [];
    if (isset($variables['content']['field_carousel_items']['#items'])) {
      foreach ($variables['content']['field_carousel_items']['#items'] as $delta => $item) {
        // Load the referenced node.
        $node = $item['#node'];
        if ($node) {
          // Get image URL.
          $image_url = '';
          if ($node->hasField('field_image') && !$node->get('field_image')->isEmpty()) {
            $file = $node->get('field_image')->entity;
            $uri = $file->getFileUri();
            $image_url = \Drupal::service('file_url_generator')->generateAbsoluteString($uri);
          }

          // Add node details to carousel items.
          $variables['carousel_items'][] = [
            'caption_title' => $node->getTitle(),
            'caption_content' => $node->get('body')->summary ?? '',
            'image_src' => $image_url,
            'interval' => 5000, // Default interval.
          ];
        }
      }
    }
  }

  // Handle the Spacer Block.
  if ($variables['plugin_id'] === 'inline_block:spacer') {

    // Extract the block content.
    if (isset($variables['content']['#block_content']) && $variables['content']['#block_content'] instanceof Drupal\block_content\Entity\BlockContent) {
      $block_content = $variables['content']['#block_content'];

      // Extract the height field.
      $height_value = $block_content->get('field_height')->value ?? 'Medium (40px)';
      $height_classes = [
        'Small (20px)' => 'spacer-small',
        'Medium (40px)' => 'spacer-medium',
        'Large (60px)' => 'spacer-large',
      ];
      $variables['height_class'] = $height_classes[$height_value] ?? 'spacer-medium';

      // Add contextual links for Layout Builder.
      $variables['attributes']['data-contextual-id'] = 'block_content:' . $variables['content']['#block_content']->id();
    }
  }
}

/**
 * Implements hook_theme_suggestions_alter().
 */
function saho_theme_suggestions_alter(array &$suggestions, array $variables, $hook) {
  // Check if the element is part of a Gin Layout Builder form.
  if (isset($variables['element']['#gin_lb_form'])) {
    // Remove Bootstrap-related suggestions if present.
    $found = FALSE;
    foreach ($suggestions as $suggestion) {
      // Check for Bootstrap-specific patterns in suggestions.
      if (strpos($suggestion, '__bs') !== FALSE) {
        $found = TRUE;
        break;
      }
      // Check for label-related suggestions with Bootstrap context.
      if (strpos($suggestion, 'label') !== FALSE && isset($variables['element']['#bs'])) {
        $found = TRUE;
        break;
      }
    }

    // If any matching suggestions are found, remove them.
    if ($found) {
      $suggestions = preg_grep("/__gin_lb/", $suggestions, PREG_GREP_INVERT);
    }
  }
}

/**
 * Implements hook_preprocess_form_element().
 */
function saho_preprocess_form_element(array &$variables) {
  // Check if the form element has array parents defined.
  $parents = $variables['element']['#array_parents'] ?? FALSE;
  $bs_parents = ['ui', 'tab_content', 'appearance', 'layout_settings'];

  // Ensure the form element belongs to a Bootstrap-related context.
  if ($parents && count(array_intersect($bs_parents, $parents)) >= 3) {
    // Add a flag to the label to indicate it belongs to a Bootstrap form element.
    $variables['label']['#bs'] = TRUE;
  }
}

/**
 * Implements hook_theme_suggestions_alter() with fallback for missing cases.
 */
function saho_theme_suggestions_alter_with_fallback(array &$suggestions, array $variables, $hook) {
  // If the element is part of a Gin Layout Builder form, skip further processing.
  if (isset($variables['element']['#gin_lb_form'])) {
    return;
  }

  // Additional fallback logic for other cases.
  foreach ($suggestions as $key => $suggestion) {
    // Remove any suggestions that are not relevant to the current theme.
    if (strpos($suggestion, '__irrelevant') !== FALSE) {
      unset($suggestions[$key]);
    }
  }
}

function saho_preprocess_node(array &$variables) {
 // Make logo available to all templates using page.html.twig.
 $logo = \Drupal::theme()->getActiveTheme()->getLogo();
 $variables['site_logo'] = $logo;
 
  // set the appropriate classes and accordion views with conditional logic.
  $node = $variables['node'];

  // Add accordion views for article, archive, biography, and place content types
  if (in_array($node->bundle(), ['article', 'archive', 'biography', 'place'])) {
    $view_ids = [
      'articles' => ['view' => 'feature_children', 'block' => 'block_1'],
      'people' => ['view' => 'feature_children', 'block' => 'block_2'],
      'places' => ['view' => 'feature_children', 'block' => 'block_9'],
      'organisations' => ['view' => 'feature_children', 'block' => 'block_3'],
      'timelines' => ['view' => 'feature_children', 'block' => 'block_4'],
      'archive' => ['view' => 'feature_children', 'block' => 'block_5'],
      'galleries' => ['view' => 'feature_children', 'block' => 'block_7'],
    ];

    $accordion_views = [];

    foreach ($view_ids as $id => $data) {
      $view = \Drupal\views\Views::getView($data['view']);
      if ($view) {
        $view->setDisplay($data['block']);
        $view->setArguments([$node->id()]);
        $view->execute();

        if (!empty($view->result)) {
          $accordion_views[] = [
            'id' => $id,
            'title' => ucfirst($id),
            'view' => $data['view'],
            'block' => $data['block'],
          ];
        }
      }
    }

    $variables['accordion_views'] = $accordion_views;
  }
}

function saho_preprocess_page(array &$variables) {
  // Make logo available to all templates using page.html.twig.
  $logo = \Drupal::theme()->getActiveTheme()->getLogo();
  $variables['site_logo'] = $logo;
}

/**
 * Implements hook_preprocess_HOOK() for block--page-title-block.html.twig.
 */
function saho_preprocess_block__page_title_block(array &$variables) {
  // Get the current route match.
  $route_match = \Drupal::routeMatch();
  
  // Check if we're on a node page.
  $node = $route_match->getParameter('node');
  
  // If we have a node, customize the breadcrumb based on content type and navigation path.
  if ($node instanceof \Drupal\node\NodeInterface) {
    // Create a link to the homepage.
    $links = [];
    $links[] = \Drupal\Core\Link::createFromRoute('Home', '<front>');
    
    // Check if we can determine the user's navigation path
    $parent_from_navigation = NULL;
    $referer_url = \Drupal::request()->server->get('HTTP_REFERER');
    $used_navigation_parent = FALSE;
    
    if ($referer_url) {
      // Extract the path from the referer URL
      $referer_path = parse_url($referer_url, PHP_URL_PATH);
      
      if ($referer_path) {
        // Try to get the node ID from the path
        try {
          $url_object = \Drupal::service('path.validator')->getUrlIfValid($referer_path);
          if ($url_object && $url_object->getRouteName() === 'entity.node.canonical') {
            $route_params = $url_object->getRouteParameters();
            if (isset($route_params['node'])) {
              $referer_nid = $route_params['node'];
              
              // Check if the current node has this node as a parent
              if ($node->hasField('field_feature_parent') && !$node->get('field_feature_parent')->isEmpty()) {
                foreach ($node->get('field_feature_parent') as $parent_item) {
                  if ($parent_item->target_id == $referer_nid) {
                    // We found a match! Load the parent node
                    $parent_from_navigation = \Drupal\node\Entity\Node::load($referer_nid);
                    $used_navigation_parent = TRUE;
                    break;
                  }
                }
              }
            }
          }
        }
        catch (\Exception $e) {
          // If there's an error resolving the path, just continue with the default breadcrumb
          \Drupal::logger('saho')->notice('Error resolving referer path for breadcrumb: @message', ['@message' => $e->getMessage()]);
        }
      }
    }
    
    // Helper function to truncate text with ellipsis
    $truncate_text = function($text, $length = 70) {
      if (mb_strlen($text) <= $length) {
        return $text;
      }
      return mb_substr($text, 0, $length - 1) . '…';
    };
    
    // If we found a parent from navigation, use it in the breadcrumb
    if ($parent_from_navigation) {
      $links[] = \Drupal\Core\Link::createFromRoute(
        $truncate_text($parent_from_navigation->getTitle(), 70),
        'entity.node.canonical',
        ['node' => $parent_from_navigation->id()]
      );
    }
    // Otherwise, use the taxonomy-based breadcrumb
    else {
      // Get the node type.
      $node_type = $node->getType();
      
      // Customize breadcrumb based on content type.
      switch ($node_type) {
        case 'article':
          // Define the taxonomy fields in priority order
          $taxonomy_fields = [
            'field_politics_society_categorie',
            'field_arts_culture_categories',
            'field_africa_category',
            'field_timeline_categories_type',
            'field_place_type_category',
            'field_classroom_categories',
          ];
          
          // Track which fields have values
          $fields_with_values = [];
          
          // Check each field for values
          foreach ($taxonomy_fields as $field_name) {
            if ($node->hasField($field_name) && !$node->get($field_name)->isEmpty()) {
              $term = $node->get($field_name)->entity;
              if ($term) {
                $fields_with_values[$field_name] = [
                  'term' => $term,
                  'label' => $term->label(),
                  'id' => $term->id(),
                ];
              }
            }
          }
          
          // If we have values, add the highest priority one to the breadcrumb
          if (!empty($fields_with_values)) {
            // Get the first field with a value (highest priority)
            foreach ($taxonomy_fields as $field_name) {
              if (isset($fields_with_values[$field_name])) {
                $field_data = $fields_with_values[$field_name];
                $links[] = \Drupal\Core\Link::createFromRoute(
                  $truncate_text($field_data['label'], 70), 
                  'entity.taxonomy_term.canonical', 
                  ['taxonomy_term' => $field_data['id']]
                );
                break; // Only use the highest priority field
              }
            }
          }
          // If no taxonomy terms, check for feature parent
          elseif (!$used_navigation_parent && $node->hasField('field_feature_parent') && !$node->get('field_feature_parent')->isEmpty()) {
            $parent_id = $node->get('field_feature_parent')->first()->target_id;
            $parent_node = \Drupal\node\Entity\Node::load($parent_id);
            if ($parent_node) {
              $links[] = \Drupal\Core\Link::createFromRoute(
                $parent_node->getTitle(),
                'entity.node.canonical',
                ['node' => $parent_node->id()]
              );
            }
          }
          break;
          
        case 'place':
          // Home > Place Category > Title
          if ($node->hasField('field_place_category') && !$node->get('field_place_category')->isEmpty()) {
            $term = $node->get('field_place_category')->entity;
            if ($term) {
              $links[] = \Drupal\Core\Link::createFromRoute($truncate_text($term->label(), 70), 'entity.taxonomy_term.canonical', ['taxonomy_term' => $term->id()]);
            }
          }
          // If no taxonomy terms, check for feature parent
          elseif (!$used_navigation_parent && $node->hasField('field_feature_parent') && !$node->get('field_feature_parent')->isEmpty()) {
            $parent_id = $node->get('field_feature_parent')->first()->target_id;
            $parent_node = \Drupal\node\Entity\Node::load($parent_id);
            if ($parent_node) {
              $links[] = \Drupal\Core\Link::createFromRoute(
                $parent_node->getTitle(),
                'entity.node.canonical',
                ['node' => $parent_node->id()]
              );
            }
          }
          break;
          
        case 'archive':
          // Home > SAHO Archive > Category Logic > Title
          
          // Add "SAHO Archive" as a fixed second level
          // Note: Using '<none>' as route name creates a non-clickable breadcrumb item
          // If you want it to be clickable, replace with an actual route and parameters
          $archive_url = \Drupal\Core\Url::fromUserInput('/archives');
          $links[] = \Drupal\Core\Link::fromTextAndUrl('SAHO Archive', $archive_url);
          
          // Add category (Media Library Type) as third level if available
          if ($node->hasField('field_media_library_type') && !$node->get('field_media_library_type')->isEmpty()) {
            $term = $node->get('field_media_library_type')->entity;
            if ($term) {
              $links[] = \Drupal\Core\Link::createFromRoute($truncate_text($term->label(), 70), 'entity.taxonomy_term.canonical', ['taxonomy_term' => $term->id()]);
            }
          }
          // If no taxonomy terms, check for feature parent
          elseif (!$used_navigation_parent && $node->hasField('field_feature_parent') && !$node->get('field_feature_parent')->isEmpty()) {
            $parent_id = $node->get('field_feature_parent')->first()->target_id;
            $parent_node = \Drupal\node\Entity\Node::load($parent_id);
            if ($parent_node) {
              $links[] = \Drupal\Core\Link::createFromRoute(
                $parent_node->getTitle(),
                'entity.node.canonical',
                ['node' => $parent_node->id()]
              );
            }
          }
          break;
          
        case 'biography':
          // Home > People Category > Biography Art Category (if value) > Title
          if ($node->hasField('field_people_category') && !$node->get('field_people_category')->isEmpty()) {
            $term = $node->get('field_people_category')->entity;
            if ($term) {
              $links[] = \Drupal\Core\Link::createFromRoute($truncate_text($term->label(), 70), 'entity.taxonomy_term.canonical', ['taxonomy_term' => $term->id()]);
            }
          }
          
          if ($node->hasField('field_biography_art_category') && !$node->get('field_biography_art_category')->isEmpty()) {
            $term = $node->get('field_biography_art_category')->entity;
            if ($term) {
              $links[] = \Drupal\Core\Link::createFromRoute($term->label(), 'entity.taxonomy_term.canonical', ['taxonomy_term' => $term->id()]);
            }
          }
          
          // If no taxonomy terms, check for feature parent
          if (count($links) == 1 && !$used_navigation_parent && $node->hasField('field_feature_parent') && !$node->get('field_feature_parent')->isEmpty()) {
            $parent_id = $node->get('field_feature_parent')->first()->target_id;
            $parent_node = \Drupal\node\Entity\Node::load($parent_id);
            if ($parent_node) {
              $links[] = \Drupal\Core\Link::createFromRoute(
                $parent_node->getTitle(),
                'entity.node.canonical',
                ['node' => $parent_node->id()]
              );
            }
          }
          break;
          
        default:
          // For other content types, check for feature parent
          if (!$used_navigation_parent && $node->hasField('field_feature_parent') && !$node->get('field_feature_parent')->isEmpty()) {
            $parent_id = $node->get('field_feature_parent')->first()->target_id;
            $parent_node = \Drupal\node\Entity\Node::load($parent_id);
            if ($parent_node) {
              $links[] = \Drupal\Core\Link::createFromRoute(
                $parent_node->getTitle(),
                'entity.node.canonical',
                ['node' => $parent_node->id()]
              );
            }
          }
          break;
      }
    }
    
    // Helper function to truncate text with ellipsis
    $truncate_text = function($text, $length = 70) {
      if (mb_strlen($text) <= $length) {
        return $text;
      }
      return mb_substr($text, 0, $length - 1) . '…';
    };
    
    // Add the current page as the last breadcrumb item, truncating if necessary.
    $links[] = \Drupal\Core\Link::createFromRoute($truncate_text($node->getTitle()), '<none>');
    
    // Create a breadcrumb render array.
    $breadcrumb_build = [
      '#theme' => 'breadcrumb',
      '#links' => $links,
    ];
    
    // Add the breadcrumb render array to the variables.
    $variables['breadcrumb'] = $breadcrumb_build;
    
    // Store the breadcrumb in the user's session for potential use in other contexts
    $session = \Drupal::request()->getSession();
    $session->set('saho_last_breadcrumb_node', $node->id());
  }
  else {
    // For non-node pages, use the default breadcrumb.
    $breadcrumb = \Drupal::service('breadcrumb')->build($route_match);
    
    // Convert the breadcrumb to a render array.
    $breadcrumb_links = $breadcrumb->getLinks();
    $breadcrumb_build = [
      '#theme' => 'breadcrumb',
      '#links' => $breadcrumb_links,
    ];
    
    // Add the breadcrumb render array to the variables.
    $variables['breadcrumb'] = $breadcrumb_build;
  }
}

/**
 * Implements hook_theme().
 */
function saho_theme($existing, $type, $theme, $path) {
  return [
    'header' => [
      'variables' => [
        'main_menu' => NULL,
      ],
      'template' => 'content/header',
    ],
  ];
}

/**
 * Implements hook_preprocess_HOOK() for header.html.twig.
 */
function saho_preprocess_header(array &$variables) {
  // Get the main menu tree.
  $menu_tree = \Drupal::menuTree();
  
  // Load the main menu tree.
  $parameters = $menu_tree->getCurrentRouteMenuTreeParameters('main');
  $parameters->setMaxDepth(3); // Allow up to 3 levels of menu depth
  $parameters->onlyEnabledLinks();
  
  $tree = $menu_tree->load('main', $parameters);
  $manipulators = [
    ['callable' => 'menu.default_tree_manipulators:checkAccess'],
    ['callable' => 'menu.default_tree_manipulators:generateIndexAndSort'],
    ['callable' => 'menu.default_tree_manipulators:flatten'], // This helps with active trail
  ];
  $tree = $menu_tree->transform($tree, $manipulators);
  
  // Convert the tree to a nested array structure for the template.
  $main_menu = [];
  foreach ($tree as $item) {
    $menu_item = [
      'title' => $item->link->getTitle(),
      'url' => $item->link->getUrlObject()->toString(),
      'in_active_trail' => $item->inActiveTrail,
      'below' => [],
    ];
    
    // Process children if they exist.
    if ($item->hasChildren) {
      foreach ($item->subtree as $child) {
        $child_item = [
          'title' => $child->link->getTitle(),
          'url' => $child->link->getUrlObject()->toString(),
          'in_active_trail' => $child->inActiveTrail,
          'below' => [],
        ];
        
        // Process grandchildren if they exist.
        if ($child->hasChildren) {
          foreach ($child->subtree as $grandchild) {
            $child_item['below'][] = [
              'title' => $grandchild->link->getTitle(),
              'url' => $grandchild->link->getUrlObject()->toString(),
              'in_active_trail' => $grandchild->inActiveTrail,
            ];
          }
        }
        
        $menu_item['below'][] = $child_item;
      }
    }
    
    $main_menu[] = $menu_item;
  }
  
  $variables['main_menu'] = $main_menu;
}