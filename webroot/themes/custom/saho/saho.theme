<?php

use Drupal\node\Entity\Node;
use Drupal\Core\Datetime\DateFormatter;

/**
 * @file
 * Theme functions.
 */

// Include all files from the includes directory.
$includes_path = dirname(__FILE__) . '/includes/*.theme';
foreach (glob($includes_path) as $file) {
  require_once dirname(__FILE__) . '/includes/' . basename($file);
}

/**
 * Implements hook_preprocess_block().
 */
function saho_preprocess_block(&$variables) {
  if ($variables['plugin_id'] === 'inline_block:tdih') {
    $variables['tdih_nodes'] = [];

    // Add contextual links for the block.
    $variables['contextual_links'] = [
      'block' => [
        'route_parameters' => ['block_content' => $variables['elements']['#id']],
      ],
    ];

    // Safely get the raw boolean value for the manual override field.
    $manual_override = !empty($variables['content']['field_use_manual_override']['#items'][0]) &&
      (bool) $variables['content']['field_use_manual_override']['#items'][0]->value;

    // Get the manually selected entity, if any.
    $manual_entity = !empty($variables['content']['field_manual_entity']['#items'][0]) 
      ? $variables['content']['field_manual_entity']['#items'][0] 
      : NULL;

    $node = NULL;

    if ($manual_override && $manual_entity) {
      // Use the manually selected node.
      $node = \Drupal\node\Entity\Node::load($manual_entity->getValue()['target_id']);
    } else {
      // Automated selection based on today's date.
      $today = new \DateTime('now', new \DateTimeZone('UTC'));
      $day = $today->format('d');
      $month = $today->format('m');

      // Query nodes matching today's date.
      $query = \Drupal::entityQuery('node')
        ->condition('status', 1)
        ->condition('type', 'event')
        ->condition('field_this_day_in_history_3', "%-$month-$day", 'LIKE')
        ->condition('field_home_page_feature', 1) // Boolean field indicating front-page feature.
        ->accessCheck(TRUE)
        ->execute();

      if (!empty($query)) {
        $nids = array_values($query);

        // Randomize the selection for each page load.
        $nid = $nids[array_rand($nids)];
        $node = \Drupal\node\Entity\Node::load($nid);
      }
    }

    if (!empty($node)) {
      $image_url = '';

      // Directly get the image URL from the node field.
      if ($node->hasField('field_event_image') && !$node->get('field_event_image')->isEmpty()) {
        $file = $node->get('field_event_image')->entity;
        if ($file) {
          $image_url = \Drupal::service('file_url_generator')->generateAbsoluteString($file->getFileUri());
        }
      }

      // Use the ViewBuilder to render the entity in the 'teaser' view mode.
      $view_builder = \Drupal::entityTypeManager()->getViewBuilder('node');
      $rendered_entity = $view_builder->view($node, 'teaser');

      // Pass the rendered entity to the template.
      $variables['tdih_nodes'][] = [
        'rendered' => $rendered_entity, // Rendered teaser view.
        'id' => $node->id(),
        'title' => $node->getTitle(),
        'url' => $node->toUrl()->toString(),
        'image' => $image_url, // Image URL fetched directly from the node field.
        'date' => $node->get('field_this_day_in_history_3')->value ?? '',
      ];
    }
  }
  
  // Process the History Pictures block.
  // Check for the specific block type.
  if ($variables['base_plugin_id'] == 'block_content' && $variables['derivative_plugin_id'] == 'inline_block:history_in_pictures') {

    // Intro text.
    $variables['intro_text'] = $variables['content']['field_intro_text']['#items'][0]->value ?? '';

    // Carousel items.
    $variables['carousel_items'] = [];
    if (isset($variables['content']['field_carousel_items']['#items'])) {
      foreach ($variables['content']['field_carousel_items']['#items'] as $delta => $item) {
        // Load the referenced node.
        $node = $item['#node'];
        if ($node) {
          // Get image URL.
          $image_url = '';
          if ($node->hasField('field_image') && !$node->get('field_image')->isEmpty()) {
            $file = $node->get('field_image')->entity;
            $uri = $file->getFileUri();
            $image_url = \Drupal::service('file_url_generator')->generateAbsoluteString($uri);
          }

          // Add node details to carousel items.
          $variables['carousel_items'][] = [
            'caption_title' => $node->getTitle(),
            'caption_content' => $node->get('body')->summary ?? '',
            'image_src' => $image_url,
            'interval' => 5000, // Default interval.
          ];
        }
      }
    }
  }

  // Handle the Spacer Block.
  if ($variables['plugin_id'] === 'inline_block:spacer') {

    // Extract the block content.
    if (isset($variables['content']['#block_content']) && $variables['content']['#block_content'] instanceof Drupal\block_content\Entity\BlockContent) {
      $block_content = $variables['content']['#block_content'];

      // Extract the height field.
      $height_value = $block_content->get('field_height')->value ?? 'Medium (40px)';
      $height_classes = [
        'Small (20px)' => 'spacer-small',
        'Medium (40px)' => 'spacer-medium',
        'Large (60px)' => 'spacer-large',
      ];
      $variables['height_class'] = $height_classes[$height_value] ?? 'spacer-medium';

      // Add contextual links for Layout Builder.
      $variables['attributes']['data-contextual-id'] = 'block_content:' . $variables['content']['#block_content']->id();
    }
  }
}
