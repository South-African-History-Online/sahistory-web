<?php

use Drupal\node\Entity\Node;
use Drupal\Core\Datetime\DateFormatter;
use Drupal\image\Entity\ImageStyle;
use Drupal\file\Entity\File;

/**
 * @file
 * Theme functions.
 */


/**
 * Implements hook_page_attachments_alter().
 */
function saho_page_attachments_alter(array &$page) {
  // Removed Google Fonts preconnect - using self-hosted fonts instead
  
  // Critical CSS is now handled by the Critical CSS contrib module
  // See: /admin/config/development/performance/critical-css
  // Critical CSS files are located in: themes/custom/saho/critical-css/
  
  // Manually load AOS library to fix dependency issues
  $page['#attached']['html_head'][] = [
    [
      '#type' => 'html_tag',
      '#tag' => 'script',
      '#attributes' => [
        'src' => '/libraries/aos/dist/aos.js',
        'defer' => FALSE,
      ],
    ],
    'aos_library_manual',
  ];
}

/**
 * Implements hook_js_alter().
 */
function saho_js_alter(&$javascript, \Drupal\Core\Asset\AttachedAssetsInterface $assets) {
  // Defer non-critical JavaScript for better performance
  foreach ($javascript as $key => &$item) {
    // Skip core essential scripts, bootstrap components, and our own critical scripts
    if (strpos($key, 'core/') === FALSE && 
        strpos($key, 'saho/') === FALSE &&
        strpos($key, 'bootstrap') === FALSE &&
        !in_array($key, ['drupalSettings', 'domReady'])) {
      // Add defer attribute to non-critical scripts
      $item['attributes']['defer'] = TRUE;
    }
  }
}

/**
 * Implements hook_preprocess_image().
 */
function saho_preprocess_image(&$variables) {
  // Add width and height attributes to prevent CLS (Cumulative Layout Shift)
  if (!empty($variables['uri'])) {
    // Try to get image dimensions if not already set
    if (empty($variables['attributes']['width']) || empty($variables['attributes']['height'])) {
      $image = \Drupal::service('image.factory')->get($variables['uri']);
      if ($image->isValid()) {
        $variables['attributes']['width'] = $image->getWidth();
        $variables['attributes']['height'] = $image->getHeight();
      }
    }
    
    // Add loading="lazy" for better performance (native browser lazy loading)
    // Skip for first few images to avoid delaying LCP
    if (empty($variables['attributes']['loading'])) {
      // Check if this might be an above-the-fold image (hero, banner, etc.)
      $is_above_fold = FALSE;
      if (isset($variables['style_name'])) {
        $above_fold_styles = ['hero', 'banner', 'featured', 'large'];
        foreach ($above_fold_styles as $style) {
          if (strpos($variables['style_name'], $style) !== FALSE) {
            $is_above_fold = TRUE;
            break;
          }
        }
      }
      
      if (!$is_above_fold) {
        $variables['attributes']['loading'] = 'lazy';
      } else {
        // For above-the-fold images, use eager loading
        $variables['attributes']['loading'] = 'eager';
      }
    }
    
    // Add decoding="async" for non-blocking image decoding
    if (empty($variables['attributes']['decoding'])) {
      $variables['attributes']['decoding'] = 'async';
    }
    
    // Add WebP support with fallback for images
    $style_name = $variables['style_name'] ?? NULL;
    
    // For images with style, try to create WebP version
    if ($style_name && strpos($style_name, 'webp_') !== 0) {
      // Try to find corresponding WebP style
      $webp_style_name = 'webp_' . $style_name;
      $webp_style = ImageStyle::load($webp_style_name);
      
      if ($webp_style) {
        // Generate WebP URL
        $webp_url = $webp_style->buildUrl($variables['uri']);
        
        // Add WebP source to variables for template use
        $variables['webp_src'] = $webp_url;
        $variables['original_src'] = $variables['uri'];
        
        // Set attributes for picture element
        $variables['attributes']['class'][] = 'webp-enabled';
      }
    }
    // For images without style, create direct WebP conversion
    elseif (!$style_name) {
      // Temporarily disable direct WebP conversion to avoid errors
      // This will be re-enabled after testing with image styles
      /*
      $webp_uri = saho_generate_webp_uri($variables['uri']);
      if ($webp_uri) {
        $variables['webp_src'] = \Drupal::service('file_url_generator')->generateAbsoluteString($webp_uri);
        $variables['original_src'] = $variables['uri'];
        $variables['attributes']['class'][] = 'webp-enabled';
      }
      */
    }
  }
}

/**
 * Implements hook_preprocess_responsive_image().
 */
function saho_preprocess_responsive_image(&$variables) {
  // Apply the same lazy loading logic to responsive images
  if (empty($variables['attributes']['loading'])) {
    $variables['attributes']['loading'] = 'lazy';
  }
  if (empty($variables['attributes']['decoding'])) {
    $variables['attributes']['decoding'] = 'async';
  }
}


// Include all files from the includes directory.
$includes_path = dirname(__FILE__) . '/includes/*.theme';
foreach (glob($includes_path) as $file) {
  require_once dirname(__FILE__) . '/includes/' . basename($file);
}

/**
 * Implements hook_preprocess_block().
 */
function saho_preprocess_block(&$variables) {
  
  // Process the History Pictures block.
  // Check for the specific block type.
  if ($variables['base_plugin_id'] == 'block_content' && $variables['derivative_plugin_id'] == 'inline_block:history_in_pictures') {

    // Intro text.
    $variables['intro_text'] = $variables['content']['field_intro_text']['#items'][0]->value ?? '';

    // Carousel items.
    $variables['carousel_items'] = [];
    if (isset($variables['content']['field_carousel_items']['#items'])) {
      foreach ($variables['content']['field_carousel_items']['#items'] as $delta => $item) {
        // Load the referenced node.
        $node = $item['#node'];
        if ($node) {
          // Get image URL.
          $image_url = '';
          if ($node->hasField('field_image') && !$node->get('field_image')->isEmpty()) {
            $file = $node->get('field_image')->entity;
            $uri = $file->getFileUri();
            $image_url = \Drupal::service('file_url_generator')->generateAbsoluteString($uri);
          }

          // Add node details to carousel items.
          $variables['carousel_items'][] = [
            'caption_title' => $node->getTitle(),
            'caption_content' => $node->get('body')->summary ?? '',
            'image_src' => $image_url,
            'interval' => 5000, // Default interval.
          ];
        }
      }
    }
  }

  // Handle the Spacer Block.
  if ($variables['plugin_id'] === 'inline_block:spacer') {

    // Extract the block content.
    if (isset($variables['content']['#block_content']) && $variables['content']['#block_content'] instanceof Drupal\block_content\Entity\BlockContent) {
      $block_content = $variables['content']['#block_content'];

      // Extract the height field.
      $height_value = $block_content->get('field_height')->value ?? 'Medium (40px)';
      $height_classes = [
        'Small (20px)' => 'spacer-small',
        'Medium (40px)' => 'spacer-medium',
        'Large (60px)' => 'spacer-large',
      ];
      $variables['height_class'] = $height_classes[$height_value] ?? 'spacer-medium';

      // Add contextual links for Layout Builder.
      $variables['attributes']['data-contextual-id'] = 'block_content:' . $variables['content']['#block_content']->id();
    }
  }
}

/**
 * Implements hook_theme_suggestions_alter().
 */
function saho_theme_suggestions_alter(array &$suggestions, array $variables, $hook) {
  // Check if the element is part of a Gin Layout Builder form.
  if (isset($variables['element']['#gin_lb_form'])) {
    // Remove Bootstrap-related suggestions if present.
    $found = FALSE;
    foreach ($suggestions as $suggestion) {
      // Check for Bootstrap-specific patterns in suggestions.
      if (strpos($suggestion, '__bs') !== FALSE) {
        $found = TRUE;
        break;
      }
      // Check for label-related suggestions with Bootstrap context.
      if (strpos($suggestion, 'label') !== FALSE && isset($variables['element']['#bs'])) {
        $found = TRUE;
        break;
      }
    }

    // If any matching suggestions are found, remove them.
    if ($found) {
      $suggestions = preg_grep("/__gin_lb/", $suggestions, PREG_GREP_INVERT);
    }
  }
}

/**
 * Implements hook_preprocess_form_element().
 */
function saho_preprocess_form_element(array &$variables) {
  // Check if the form element has array parents defined.
  $parents = $variables['element']['#array_parents'] ?? FALSE;
  $bs_parents = ['ui', 'tab_content', 'appearance', 'layout_settings'];

  // Ensure the form element belongs to a Bootstrap-related context.
  if ($parents && count(array_intersect($bs_parents, $parents)) >= 3) {
    // Add a flag to the label to indicate it belongs to a Bootstrap form element.
    $variables['label']['#bs'] = TRUE;
  }
}

/**
 * Implements hook_theme_suggestions_alter() with fallback for missing cases.
 */
function saho_theme_suggestions_alter_with_fallback(array &$suggestions, array $variables, $hook) {
  // If the element is part of a Gin Layout Builder form, skip further processing.
  if (isset($variables['element']['#gin_lb_form'])) {
    return;
  }

  // Additional fallback logic for other cases.
  foreach ($suggestions as $key => $suggestion) {
    // Remove any suggestions that are not relevant to the current theme.
    if (strpos($suggestion, '__irrelevant') !== FALSE) {
      unset($suggestions[$key]);
    }
  }
}

function saho_preprocess_node(array &$variables) {
 // Make logo available to all templates using page.html.twig.
 $logo = \Drupal::theme()->getActiveTheme()->getLogo();
 $variables['site_logo'] = $logo;

 // Pre-render responsive images for article templates
 $node = $variables['node'];

 // For articles: pre-render hero images
 if ($node->bundle() == 'article') {
   // Hero banner image (eager loading for LCP)
   if ($node->hasField('field_feature_banner') && !$node->get('field_feature_banner')->isEmpty()) {
     $banner_field = $node->get('field_feature_banner');
     $banner_entity = $banner_field->entity;
     $banner_alt = $banner_field->alt ?? '';

     $variables['hero_banner_image'] = saho_get_responsive_image(
       $banner_entity,
       $banner_alt,
       ['saho_hero', 'saho_large', 'saho_hero_mobile'],
       '100vw',
       'eager',
       'saho-feature-banner-image'
     );
   }

   // Article image (can be hero or sidebar depending on banner presence)
   if ($node->hasField('field_article_image') && !$node->get('field_article_image')->isEmpty()) {
     $article_field = $node->get('field_article_image');
     $article_entity = $article_field->entity;
     $article_alt = $article_field->alt ?? '';
     $has_banner = $node->hasField('field_feature_banner') && !$node->get('field_feature_banner')->isEmpty();

     // If no banner, this is the hero (eager), otherwise sidebar (lazy)
     $variables['article_image'] = saho_get_responsive_image(
       $article_entity,
       $article_alt,
       $has_banner ? ['saho_large', 'saho_medium'] : ['saho_hero', 'saho_large', 'saho_hero_mobile'],
       $has_banner ? '(max-width: 768px) 100vw, 400px' : '100vw',
       $has_banner ? 'lazy' : 'eager',
       $has_banner ? 'saho-image' : 'saho-feature-banner-image'
     );
   }
 }
 
  // Add URL truncation, sidebar tabs, context details, and accordion libraries for content types
  $node = $variables['node'];
  if (in_array($node->bundle(), ['article', 'archive', 'biography', 'place', 'event'])) {
    $variables['#attached']['library'][] = 'saho/url.truncation';
    $variables['#attached']['library'][] = 'saho/sidebar.tabs';
    $variables['#attached']['library'][] = 'saho/context.details';
    $variables['#attached']['library'][] = 'saho/sidebar.accordion';
  }

  // Add TDIH Interactive Block to event nodes - minimal version
  if ($node->bundle() == 'event' && $variables['view_mode'] == 'full') {
    // Load the TDIH Interactive Block configured for minimal display
    $block_manager = \Drupal::service('plugin.manager.block');
    $config = [
      'display_mode' => 'compact',
      'show_date_picker' => TRUE,
      'date_picker_mode' => 'day_month',
      'show_today_history' => FALSE,
      'show_explore_button' => FALSE,
      'show_header_title' => FALSE,
    ];

    $plugin_block = $block_manager->createInstance('tdih_interactive_block', $config);
    $render = $plugin_block->build();
    $variables['tdih_minimal_block'] = $render;
  }
  
  // Add biography-specific styling for biography content type
  if ($node->bundle() == 'biography') {
    $variables['#attached']['library'][] = 'saho/biography.metadata';
  }
  
  // For article and biography pages, preload the main image for better LCP
  if ($variables['view_mode'] == 'full' && in_array($node->bundle(), ['article', 'biography'])) {
    // Check if the node has a field_image
    if ($node->hasField('field_image') && !$node->get('field_image')->isEmpty()) {
      $image_field = $node->get('field_image')->first();
      if ($image_field) {
        $file = $image_field->entity;
        if ($file) {
          $image_uri = $file->getFileUri();
          $image_url = \Drupal::service('file_url_generator')->generateAbsoluteString($image_uri);
          
          // Add preload link to page attachments
          $variables['#attached']['html_head'][] = [
            [
              '#type' => 'html_tag',
              '#tag' => 'link',
              '#attributes' => [
                'rel' => 'preload',
                'as' => 'image',
                'href' => $image_url,
                'fetchpriority' => 'high',
              ],
            ],
            'preload_main_image',
          ];
        }
      }
    }
  }
 
  // set the appropriate classes and accordion views with conditional logic.

  // Add accordion views for article, archive, biography, and place content types
  if (in_array($node->bundle(), ['article', 'archive', 'biography', 'place'])) {
    $view_ids = [
      'articles' => ['view' => 'feature_children', 'block' => 'block_1'],
      'people' => ['view' => 'feature_children', 'block' => 'block_2'],
      'places' => ['view' => 'feature_children', 'block' => 'block_9'],
      'organisations' => ['view' => 'feature_children', 'block' => 'block_3'],
      'timelines' => ['view' => 'feature_children', 'block' => 'block_4'],
      'archive' => ['view' => 'feature_children', 'block' => 'block_5'],
      'galleries' => ['view' => 'feature_children', 'block' => 'block_7'],
    ];

    $accordion_views = [];

    foreach ($view_ids as $id => $data) {
      $view = \Drupal\views\Views::getView($data['view']);
      if ($view) {
        $view->setDisplay($data['block']);
        $view->setArguments([$node->id()]);
        $view->execute();

        if (!empty($view->result)) {
          $accordion_views[] = [
            'id' => $id,
            'title' => ucfirst($id),
            'view' => $data['view'],
            'block' => $data['block'],
          ];
        }
      }
    }

    $variables['accordion_views'] = $accordion_views;
  }

  // Process field_feature_parent to group by content type
  if ($node->hasField('field_feature_parent') && !$node->get('field_feature_parent')->isEmpty()) {
    $grouped_parents = [
      'articles' => [],
      'people' => [],
      'places' => [],
      'organisations' => [],
      'timelines' => [],
      'archive' => [],
    ];

    foreach ($node->get('field_feature_parent') as $item) {
      $referenced_node = $item->entity;
      if ($referenced_node) {
        $bundle = $referenced_node->bundle();

        // Map bundle to display category
        switch ($bundle) {
          case 'article':
            $grouped_parents['articles'][] = $referenced_node;
            break;
          case 'biography':
            $grouped_parents['people'][] = $referenced_node;
            break;
          case 'place':
            $grouped_parents['places'][] = $referenced_node;
            break;
          case 'organisation':
            $grouped_parents['organisations'][] = $referenced_node;
            break;
          case 'event':
            $grouped_parents['timelines'][] = $referenced_node;
            break;
          case 'archive':
            $grouped_parents['archive'][] = $referenced_node;
            break;
        }
      }
    }

    // Remove empty categories
    $grouped_parents = array_filter($grouped_parents, function($items) {
      return !empty($items);
    });

    $variables['grouped_feature_parents'] = $grouped_parents;
  }
}

function saho_preprocess_page(array &$variables) {
  // Make logo available to all templates using page.html.twig.
  $logo = \Drupal::theme()->getActiveTheme()->getLogo();
  $variables['site_logo'] = $logo;
}

/**
 * Implements hook_preprocess_HOOK() for block--page-title-block.html.twig.
 */
function saho_preprocess_block__page_title_block(array &$variables) {
  // Get the current route match.
  $route_match = \Drupal::routeMatch();
  
  // Check if we're on a node page.
  $node = $route_match->getParameter('node');
  
  // If we have a node, customize the breadcrumb based on content type and navigation path.
  if ($node instanceof \Drupal\node\NodeInterface) {
    // Create a link to the homepage.
    $links = [];
    $links[] = \Drupal\Core\Link::createFromRoute('Home', '<front>');
    
    // Check if we can determine the user's navigation path
    $parent_from_navigation = NULL;
    $referer_url = \Drupal::request()->server->get('HTTP_REFERER');
    $used_navigation_parent = FALSE;
    
    if ($referer_url) {
      // Extract the path from the referer URL
      $referer_path = parse_url($referer_url, PHP_URL_PATH);
      
      if ($referer_path) {
        // Try to get the node ID from the path
        try {
          $url_object = \Drupal::service('path.validator')->getUrlIfValid($referer_path);
          if ($url_object && $url_object->getRouteName() === 'entity.node.canonical') {
            $route_params = $url_object->getRouteParameters();
            if (isset($route_params['node'])) {
              $referer_nid = $route_params['node'];
              
              // Check if the current node has this node as a parent
              if ($node->hasField('field_feature_parent') && !$node->get('field_feature_parent')->isEmpty()) {
                foreach ($node->get('field_feature_parent') as $parent_item) {
                  if ($parent_item->target_id == $referer_nid) {
                    // We found a match! Load the parent node
                    $parent_from_navigation = \Drupal\node\Entity\Node::load($referer_nid);
                    $used_navigation_parent = TRUE;
                    break;
                  }
                }
              }
            }
          }
        }
        catch (\Exception $e) {
          // If there's an error resolving the path, just continue with the default breadcrumb
          \Drupal::logger('saho')->notice('Error resolving referer path for breadcrumb: @message', ['@message' => $e->getMessage()]);
        }
      }
    }
    
    // Helper function to truncate text with ellipsis
    $truncate_text = function($text, $length = 70) {
      if (mb_strlen($text) <= $length) {
        return $text;
      }
      return mb_substr($text, 0, $length - 1) . '…';
    };
    
    // Get the node type for landing page mapping
    $node_type = $node->getType();
    
    // Define landing page URLs for each content type
    $landing_pages = [
      'article' => [
        'field_politics_society_categorie' => ['/politics-society', 'Politics & Society'],
        'field_arts_culture_categories' => ['/art-culture', 'Art & Culture'],
        'field_africa_category' => ['/africa', 'Africa'],
        'field_timeline_categories_type' => ['/timelines', 'Timelines'],
        'field_classroom_categories' => ['/classroom', 'Classroom'],
        'default' => ['/articles', 'Articles']
      ],
      'biography' => ['/biographies', 'Biographies'],
      'place' => ['/places', 'Places'],
      'archive' => ['/archives', 'SAHO Archive'],
      'event' => ['/timelines', 'Timelines'],
      'upcomingevent' => ['/all-upcoming-events', 'Upcoming Events'],
      'default' => ['/content', 'Content']
    ];
    
    // Add the relevant landing page at level 2
    $landing_page_added = false;
    
    // For articles, try to determine the most relevant section based on taxonomy
    if ($node_type == 'article') {
      // Check each taxonomy field in priority order
      $taxonomy_fields = [
        'field_politics_society_categorie',
        'field_arts_culture_categories',
        'field_africa_category',
        'field_timeline_categories_type',
        'field_classroom_categories',
      ];
      
      foreach ($taxonomy_fields as $field_name) {
        if (!$landing_page_added && $node->hasField($field_name) && !$node->get($field_name)->isEmpty()) {
          // We found a relevant taxonomy, use its corresponding landing page
          $landing_page = $landing_pages['article'][$field_name];
          $links[] = \Drupal\Core\Link::fromTextAndUrl(
            $landing_page[1], 
            \Drupal\Core\Url::fromUserInput($landing_page[0])
          );
          $landing_page_added = true;
          break;
        }
      }
      
      // If no specific taxonomy found, use the default for articles
      if (!$landing_page_added) {
        $default_landing = $landing_pages['article']['default'];
        $links[] = \Drupal\Core\Link::fromTextAndUrl(
          $default_landing[1], 
          \Drupal\Core\Url::fromUserInput($default_landing[0])
        );
        $landing_page_added = true;
      }
    }
    // For other content types, use their dedicated landing page
    else {
      $landing_page = isset($landing_pages[$node_type]) ? $landing_pages[$node_type] : $landing_pages['default'];
      if (is_array($landing_page) && !is_array($landing_page[0])) {
        $links[] = \Drupal\Core\Link::fromTextAndUrl(
          $landing_page[1], 
          \Drupal\Core\Url::fromUserInput($landing_page[0])
        );
        $landing_page_added = true;
      }
    }
    
    // If we found a parent from navigation, add it after the landing page
    if ($parent_from_navigation) {
      $links[] = \Drupal\Core\Link::createFromRoute(
        $truncate_text($parent_from_navigation->getTitle(), 70),
        'entity.node.canonical',
        ['node' => $parent_from_navigation->id()]
      );
    }
    // Otherwise, continue with the existing taxonomy-based breadcrumb logic
    else {
      // Get the node type.
      $node_type = $node->getType();
      
      // Customize breadcrumb based on content type.
      switch ($node_type) {
        case 'article':
          // Define the taxonomy fields in priority order
          $taxonomy_fields = [
            'field_politics_society_categorie',
            'field_arts_culture_categories',
            'field_africa_category',
            'field_timeline_categories_type',
            'field_place_type_category',
            'field_classroom_categories',
          ];
          
          // Track which fields have values
          $fields_with_values = [];
          
          // Check each field for values
          foreach ($taxonomy_fields as $field_name) {
            if ($node->hasField($field_name) && !$node->get($field_name)->isEmpty()) {
              $term = $node->get($field_name)->entity;
              if ($term) {
                $fields_with_values[$field_name] = [
                  'term' => $term,
                  'label' => $term->label(),
                  'id' => $term->id(),
                ];
              }
            }
          }
          
          // If we have values, add the highest priority one to the breadcrumb
          if (!empty($fields_with_values)) {
            // Get the first field with a value (highest priority)
            foreach ($taxonomy_fields as $field_name) {
              if (isset($fields_with_values[$field_name])) {
                $field_data = $fields_with_values[$field_name];
                $links[] = \Drupal\Core\Link::createFromRoute(
                  $truncate_text($field_data['label'], 70), 
                  'entity.taxonomy_term.canonical', 
                  ['taxonomy_term' => $field_data['id']]
                );
                break; // Only use the highest priority field
              }
            }
          }
          // If no taxonomy terms, check for feature parent
          elseif (!$used_navigation_parent && $node->hasField('field_feature_parent') && !$node->get('field_feature_parent')->isEmpty()) {
            $parent_id = $node->get('field_feature_parent')->first()->target_id;
            $parent_node = \Drupal\node\Entity\Node::load($parent_id);
            if ($parent_node) {
              $links[] = \Drupal\Core\Link::createFromRoute(
                $parent_node->getTitle(),
                'entity.node.canonical',
                ['node' => $parent_node->id()]
              );
            }
          }
          break;
          
        case 'place':
          // Home > Places > Place Category > Title
          if ($node->hasField('field_place_category') && !$node->get('field_place_category')->isEmpty()) {
            $term = $node->get('field_place_category')->entity;
            if ($term) {
              $links[] = \Drupal\Core\Link::createFromRoute($truncate_text($term->label(), 70), 'entity.taxonomy_term.canonical', ['taxonomy_term' => $term->id()]);
            }
          }
          // If no taxonomy terms, check for feature parent
          elseif (!$used_navigation_parent && $node->hasField('field_feature_parent') && !$node->get('field_feature_parent')->isEmpty()) {
            $parent_id = $node->get('field_feature_parent')->first()->target_id;
            $parent_node = \Drupal\node\Entity\Node::load($parent_id);
            if ($parent_node) {
              $links[] = \Drupal\Core\Link::createFromRoute(
                $parent_node->getTitle(),
                'entity.node.canonical',
                ['node' => $parent_node->id()]
              );
            }
          }
          break;
          
        case 'archive':
          // Home > SAHO Archive > Category Logic > Title
          // (Landing page already added above)
          
          // Add category (Media Library Type) as third level if available
          if ($node->hasField('field_media_library_type') && !$node->get('field_media_library_type')->isEmpty()) {
            $term = $node->get('field_media_library_type')->entity;
            if ($term) {
              $links[] = \Drupal\Core\Link::createFromRoute($truncate_text($term->label(), 70), 'entity.taxonomy_term.canonical', ['taxonomy_term' => $term->id()]);
            }
          }
          // If no taxonomy terms, check for feature parent
          elseif (!$used_navigation_parent && $node->hasField('field_feature_parent') && !$node->get('field_feature_parent')->isEmpty()) {
            $parent_id = $node->get('field_feature_parent')->first()->target_id;
            $parent_node = \Drupal\node\Entity\Node::load($parent_id);
            if ($parent_node) {
              $links[] = \Drupal\Core\Link::createFromRoute(
                $parent_node->getTitle(),
                'entity.node.canonical',
                ['node' => $parent_node->id()]
              );
            }
          }
          break;
          
        case 'biography':
          // Home > Biographies > People Category > Biography Art Category (if value) > Title
          if ($node->hasField('field_people_category') && !$node->get('field_people_category')->isEmpty()) {
            $term = $node->get('field_people_category')->entity;
            if ($term) {
              $links[] = \Drupal\Core\Link::createFromRoute($truncate_text($term->label(), 70), 'entity.taxonomy_term.canonical', ['taxonomy_term' => $term->id()]);
            }
          }
          
          if ($node->hasField('field_biography_art_category') && !$node->get('field_biography_art_category')->isEmpty()) {
            $term = $node->get('field_biography_art_category')->entity;
            if ($term) {
              $links[] = \Drupal\Core\Link::createFromRoute($term->label(), 'entity.taxonomy_term.canonical', ['taxonomy_term' => $term->id()]);
            }
          }
          
          // If no taxonomy terms, check for feature parent
          if (count($links) == 2 && !$used_navigation_parent && $node->hasField('field_feature_parent') && !$node->get('field_feature_parent')->isEmpty()) {
            $parent_id = $node->get('field_feature_parent')->first()->target_id;
            $parent_node = \Drupal\node\Entity\Node::load($parent_id);
            if ($parent_node) {
              $links[] = \Drupal\Core\Link::createFromRoute(
                $parent_node->getTitle(),
                'entity.node.canonical',
                ['node' => $parent_node->id()]
              );
            }
          }
          break;
          
        case 'upcomingevent':
          // Home > Upcoming Events > Event Title
          // The landing page (/all-upcoming-events) is already added above
          // No additional intermediate breadcrumb levels needed for upcoming events
          
          // Check for feature parent if needed (optional, as upcoming events are usually standalone)
          if (!$used_navigation_parent && $node->hasField('field_feature_parent') && !$node->get('field_feature_parent')->isEmpty()) {
            $parent_id = $node->get('field_feature_parent')->first()->target_id;
            $parent_node = \Drupal\node\Entity\Node::load($parent_id);
            if ($parent_node) {
              $links[] = \Drupal\Core\Link::createFromRoute(
                $truncate_text($parent_node->getTitle()),
                'entity.node.canonical',
                ['node' => $parent_node->id()]
              );
            }
          }
          break;
          
        default:
          // For other content types, check for feature parent
          if (!$used_navigation_parent && $node->hasField('field_feature_parent') && !$node->get('field_feature_parent')->isEmpty()) {
            $parent_id = $node->get('field_feature_parent')->first()->target_id;
            $parent_node = \Drupal\node\Entity\Node::load($parent_id);
            if ($parent_node) {
              $links[] = \Drupal\Core\Link::createFromRoute(
                $parent_node->getTitle(),
                'entity.node.canonical',
                ['node' => $parent_node->id()]
              );
            }
          }
          break;
      }
    }
    
    // Helper function to truncate text with ellipsis
    $truncate_text = function($text, $length = 70) {
      if (mb_strlen($text) <= $length) {
        return $text;
      }
      return mb_substr($text, 0, $length - 1) . '…';
    };
    
    // Add the current page as the last breadcrumb item, truncating if necessary.
    $links[] = \Drupal\Core\Link::createFromRoute($truncate_text($node->getTitle()), '<none>');
    
    // Create a breadcrumb render array.
    $breadcrumb_build = [
      '#theme' => 'breadcrumb',
      '#links' => $links,
    ];
    
    // Add the breadcrumb render array to the variables.
    $variables['breadcrumb'] = $breadcrumb_build;
    
    // Store the breadcrumb in the user's session for potential use in other contexts
    $session = \Drupal::request()->getSession();
    $session->set('saho_last_breadcrumb_node', $node->id());
  }
  else {
    // For non-node pages, use the default breadcrumb.
    $breadcrumb = \Drupal::service('breadcrumb')->build($route_match);
    
    // Convert the breadcrumb to a render array.
    $breadcrumb_links = $breadcrumb->getLinks();
    $breadcrumb_build = [
      '#theme' => 'breadcrumb',
      '#links' => $breadcrumb_links,
    ];
    
    // Add the breadcrumb render array to the variables.
    $variables['breadcrumb'] = $breadcrumb_build;
  }
}

/**
 * Implements hook_theme().
 */
function saho_theme($existing, $type, $theme, $path) {
  return [
    'header' => [
      'variables' => [
        'main_menu' => NULL,
      ],
      'template' => 'content/header',
    ],
  ];
}

/**
 * Implements hook_theme_suggestions_HOOK_alter() for views-view.html.twig.
 */
function saho_theme_suggestions_views_view_alter(array &$suggestions, array $variables) {
  $view = $variables['view'];
  
  // Check if this is one of our main section landing pages
  $landing_page_views = [
    'politics_society',
    'art_culture',
    'biographies',
    'africa',
    'places',
    'timelines'
  ];
  
  // Add specific suggestions for specialized sections
  if ($view->id() == 'archives') {
    // Add archives-specific template suggestion
    $suggestions[] = 'views_view__archives';
  }
  elseif ($view->id() == 'classroom') {
    // Add classroom-specific template suggestion
    $suggestions[] = 'views_view__classroom';
  }
  elseif (in_array($view->id(), $landing_page_views)) {
    // Add our generic landing page template suggestion for other sections
    $suggestions[] = 'views_view__landing_page';
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter() for views-view-grid.html.twig.
 */
function saho_theme_suggestions_views_view_grid_alter(array &$suggestions, array $variables) {
  $view = $variables['view'];
  
  // Check if this is one of our main section landing pages
  $landing_page_views = [
    'politics_society',
    'art_culture',
    'biographies',
    'africa',
    'classroom',
    'places',
    'timelines',
    'archives'
  ];
  
  if (in_array($view->id(), $landing_page_views)) {
    // Add our custom template suggestion
    $suggestions[] = 'views_view_grid__landing_page';
  }
}

/**
 * Implements hook_preprocess_HOOK() for header.html.twig.
 */
function saho_preprocess_header(array &$variables) {
  // Get the main menu tree.
  $menu_tree = \Drupal::menuTree();
  
  // Load the main menu tree.
  $parameters = $menu_tree->getCurrentRouteMenuTreeParameters('main');
  $parameters->setMaxDepth(3); // Allow up to 3 levels of menu depth
  $parameters->onlyEnabledLinks();
  
  $tree = $menu_tree->load('main', $parameters);
  $manipulators = [
    ['callable' => 'menu.default_tree_manipulators:checkAccess'],
    ['callable' => 'menu.default_tree_manipulators:generateIndexAndSort'],
    ['callable' => 'menu.default_tree_manipulators:flatten'], // This helps with active trail
  ];
  $tree = $menu_tree->transform($tree, $manipulators);
  
  // Convert the tree to a nested array structure for the template.
  $main_menu = [];
  foreach ($tree as $item) {
    $menu_item = [
      'title' => $item->link->getTitle(),
      'url' => $item->link->getUrlObject()->toString(),
      'in_active_trail' => $item->inActiveTrail,
      'below' => [],
    ];
    
    // Process children if they exist.
    if ($item->hasChildren) {
      foreach ($item->subtree as $child) {
        $child_item = [
          'title' => $child->link->getTitle(),
          'url' => $child->link->getUrlObject()->toString(),
          'in_active_trail' => $child->inActiveTrail,
          'below' => [],
        ];
        
        // Process grandchildren if they exist.
        if ($child->hasChildren) {
          foreach ($child->subtree as $grandchild) {
            $child_item['below'][] = [
              'title' => $grandchild->link->getTitle(),
              'url' => $grandchild->link->getUrlObject()->toString(),
              'in_active_trail' => $grandchild->inActiveTrail,
            ];
          }
        }
        
        $menu_item['below'][] = $child_item;
      }
    }
    
    $main_menu[] = $menu_item;
  }
  
  $variables['main_menu'] = $main_menu;
}


/**
 * Helper function to generate responsive WebP images.
 */
function saho_generate_responsive_webp_image($uri, $style_name, $alt = '', $title = '') {
  if (!$uri || !$style_name) {
    return '';
  }
  
  $original_style = ImageStyle::load($style_name);
  $webp_style_name = 'webp_' . $style_name;
  $webp_style = ImageStyle::load($webp_style_name);
  
  if (!$original_style) {
    return '';
  }
  
  $original_url = $original_style->buildUrl($uri);
  
  $output = '<picture>';
  
  // Add WebP source if available.
  if ($webp_style) {
    $webp_url = $webp_style->buildUrl($uri);
    $output .= '<source srcset="' . $webp_url . '" type="image/webp">';
  }
  
  // Add original format as fallback.
  $output .= '<img src="' . $original_url . '" alt="' . $alt . '"';
  if ($title) {
    $output .= ' title="' . $title . '"';
  }
  $output .= ' loading="lazy">';
  $output .= '</picture>';
  
  return $output;
}

/**
 * Generate WebP URI for a given image URI.
 */
function saho_generate_webp_uri($uri) {
  if (!$uri) {
    return NULL;
  }
  
  // Only process certain image types
  $supported_extensions = ['jpg', 'jpeg', 'png'];
  $path_info = pathinfo($uri);
  $extension = strtolower($path_info['extension'] ?? '');
  
  if (!in_array($extension, $supported_extensions)) {
    return NULL;
  }
  
  // Generate WebP filename
  $webp_filename = $path_info['filename'] . '.webp';
  $webp_uri = dirname($uri) . '/' . $webp_filename;
  
  // Check if WebP version already exists
  if (file_exists($webp_uri)) {
    return $webp_uri;
  }
  
  // Create WebP version if original exists
  if (file_exists($uri)) {
    $file_system = \Drupal::service('file_system');
    $real_path = $file_system->realpath($uri);
    $webp_real_path = $file_system->realpath($webp_uri);
    
    if ($real_path && saho_create_webp_image($real_path, $webp_real_path)) {
      return $webp_uri;
    }
  }
  
  return NULL;
}

/**
 * Create WebP image from source image.
 */
function saho_create_webp_image($source_path, $webp_path) {
  try {
    $image_info = getimagesize($source_path);
    if (!$image_info) {
      return FALSE;
    }
    
    $mime_type = $image_info['mime'];
    $source_image = NULL;
    
    // Create image resource based on type
    switch ($mime_type) {
      case 'image/jpeg':
        $source_image = imagecreatefromjpeg($source_path);
        break;
      case 'image/png':
        $source_image = imagecreatefrompng($source_path);
        // Preserve transparency
        imagealphablending($source_image, FALSE);
        imagesavealpha($source_image, TRUE);
        break;
      default:
        return FALSE;
    }
    
    if (!$source_image) {
      return FALSE;
    }
    
    // Ensure directory exists
    $webp_dir = dirname($webp_path);
    if (!is_dir($webp_dir)) {
      mkdir($webp_dir, 0755, TRUE);
    }
    
    // Create WebP image with 80% quality
    $success = imagewebp($source_image, $webp_path, 80);
    imagedestroy($source_image);
    
    return $success;
  }
  catch (Exception $e) {
    \Drupal::logger('saho')->error('WebP creation failed: @error', ['@error' => $e->getMessage()]);
    return FALSE;
  }
}

/**
 * Implements hook_preprocess_views_view().
 * Add preprocessing for featured content view.
 */
function saho_preprocess_views_view_featured_content(&$variables) {
  $view = $variables['view'];
  
  // Add specific preprocessing for featured content view
  if ($view->id() == 'featured_content' && $view->current_display == 'page_1') {
    // Get staff picks count
    $database = \Drupal::database();
    
    try {
      $staff_picks_query = $database->select('node__field_staff_picks', 'sp');
      $staff_picks_query->join('node_field_data', 'n', 'sp.entity_id = n.nid');
      $staff_picks_query->condition('sp.field_staff_picks_value', 1);
      $staff_picks_query->condition('sp.deleted', 0);
      $staff_picks_query->condition('n.status', 1);
      $staff_picks_count = $staff_picks_query->countQuery()->execute()->fetchField();
      
      $variables['staff_picks_count'] = $staff_picks_count;
      
      // Get most read count from statistics if available
      if (\Drupal::moduleHandler()->moduleExists('statistics')) {
        $most_read_query = $database->select('node_counter', 'nc');
        $most_read_query->join('node_field_data', 'n', 'nc.nid = n.nid');
        $most_read_query->condition('nc.totalcount', 50, '>'); // Articles with more than 50 views
        $most_read_query->condition('n.status', 1);
        $most_read_count = $most_read_query->countQuery()->execute()->fetchField();
        
        $variables['most_read_count'] = $most_read_count;
      } else {
        $variables['most_read_count'] = 0;
      }
    } catch (Exception $e) {
      $variables['staff_picks_count'] = 0;
      $variables['most_read_count'] = 0;
    }
  }
}

/**
 * Generate responsive image markup with multiple sizes and proper dimensions.
 *
 * This function creates performance-optimized image markup with:
 * - Multiple image style derivatives in srcset
 * - Proper width/height attributes to prevent CLS
 * - Configurable lazy/eager loading
 * - WebP support (handled by server)
 * - Async decoding for non-blocking rendering
 *
 * @param \Drupal\file\Entity\File|null $file_entity
 *   The file entity to render.
 * @param string $alt
 *   The alt text for the image.
 * @param array $styles
 *   Array of image style machine names to use for srcset (ordered from large to small).
 * @param string $sizes
 *   The sizes attribute value (e.g., '100vw', '(max-width: 768px) 100vw, 50vw').
 * @param string $loading
 *   Loading strategy: 'lazy' or 'eager' (use 'eager' for LCP images).
 * @param string $class
 *   CSS class(es) to add to the image.
 * @param bool $get_dimensions
 *   Whether to fetch and include width/height attributes (recommended for CLS prevention).
 *
 * @return array
 *   Render array with responsive image markup.
 */
function saho_get_responsive_image($file_entity, $alt = '', array $styles = ['saho_large', 'saho_medium'], $sizes = '100vw', $loading = 'lazy', $class = '', $get_dimensions = TRUE) {
  if (!$file_entity) {
    return [];
  }

  $uri = $file_entity->getFileUri();
  $srcset = [];

  // Build srcset from image styles
  foreach ($styles as $style_name) {
    $style = ImageStyle::load($style_name);
    if ($style) {
      $url = $style->buildUrl($uri);

      // Get width from style configuration
      $config = $style->getEffects()->getConfiguration();
      $width = 0;

      foreach ($config as $effect) {
        if (isset($effect['data']['width'])) {
          $width = $effect['data']['width'];
          break;
        }
      }

      if ($width) {
        $srcset[] = "$url {$width}w";
      }
    }
  }

  // Fallback to first style if available
  $fallback_style = ImageStyle::load($styles[0]);
  $fallback_url = $fallback_style ? $fallback_style->buildUrl($uri) : file_create_url($uri);

  // Get original dimensions for proper aspect ratio
  $width = NULL;
  $height = NULL;

  if ($get_dimensions) {
    $image = \Drupal::service('image.factory')->get($uri);
    if ($image->isValid()) {
      $original_width = $image->getWidth();
      $original_height = $image->getHeight();

      // Calculate aspect ratio and set dimensions based on first style
      if ($fallback_style && $original_width && $original_height) {
        $style_config = $fallback_style->getEffects()->getConfiguration();
        $target_width = NULL;
        $target_height = NULL;

        foreach ($style_config as $effect) {
          if (isset($effect['data']['width'])) {
            $target_width = $effect['data']['width'];
          }
          if (isset($effect['data']['height'])) {
            $target_height = $effect['data']['height'];
          }
        }

        if ($target_width) {
          $width = $target_width;
          // Calculate proportional height
          $height = $target_height ?? round(($original_height / $original_width) * $target_width);
        } else {
          $width = $original_width;
          $height = $original_height;
        }
      } else {
        $width = $original_width;
        $height = $original_height;
      }
    }
  }

  // Build attributes array
  $attributes = [
    'src' => $fallback_url,
    'alt' => $alt,
    'class' => $class,
    'loading' => $loading,
    'decoding' => 'async', // Non-blocking image decode
  ];

  if (!empty($srcset)) {
    $attributes['srcset'] = implode(', ', $srcset);
    $attributes['sizes'] = $sizes;
  }

  if ($width && $height) {
    $attributes['width'] = $width;
    $attributes['height'] = $height;
  }

  // Build attribute string
  $attr_string = '';
  foreach ($attributes as $key => $value) {
    $attr_string .= ' ' . $key . '="' . htmlspecialchars($value, ENT_QUOTES) . '"';
  }

  $markup = '<img' . $attr_string . '>';

  return ['#markup' => \Drupal\Core\Render\Markup::create($markup)];
}

/**
 * Implements hook_page_attachments().
 *
 * Add critical performance optimizations:
 * - Preload LCP (Largest Contentful Paint) images
 * - Preload critical fonts
 * - Add resource hints for external domains
 */
function saho_page_attachments(array &$attachments) {
  $route_match = \Drupal::routeMatch();
  $node = $route_match->getParameter('node');

  // Preload LCP image for better performance
  if ($node && $node instanceof \Drupal\node\NodeInterface) {
    $lcp_image_url = NULL;
    $image_sizes = NULL;
    $image_entity = NULL;

    // Determine LCP image based on content type
    switch ($node->bundle()) {
      case 'article':
        if ($node->hasField('field_feature_banner') && !$node->get('field_feature_banner')->isEmpty()) {
          $image_entity = $node->get('field_feature_banner')->entity;
        }
        elseif ($node->hasField('field_article_image') && !$node->get('field_article_image')->isEmpty()) {
          $image_entity = $node->get('field_article_image')->entity;
        }
        break;

      case 'biography':
        if ($node->hasField('field_feature_banner') && !$node->get('field_feature_banner')->isEmpty()) {
          $image_entity = $node->get('field_feature_banner')->entity;
        }
        elseif ($node->hasField('field_bio_pic') && !$node->get('field_bio_pic')->isEmpty()) {
          $image_entity = $node->get('field_bio_pic')->entity;
        }
        break;

      case 'archive':
      case 'place':
      case 'event':
        if ($node->hasField('field_feature_banner') && !$node->get('field_feature_banner')->isEmpty()) {
          $image_entity = $node->get('field_feature_banner')->entity;
        }
        break;
    }

    // Build preload link for LCP image
    if ($image_entity) {
      $uri = $image_entity->getFileUri();

      // Use hero styles for feature banners
      $hero_style = ImageStyle::load('saho_hero');
      $hero_mobile_style = ImageStyle::load('saho_hero_mobile');
      $large_style = ImageStyle::load('saho_large');

      if ($hero_style && $hero_mobile_style && $large_style) {
        $hero_url = $hero_style->buildUrl($uri);
        $hero_mobile_url = $hero_mobile_style->buildUrl($uri);
        $large_url = $large_style->buildUrl($uri);

        // Build srcset for preload
        $srcset_value = sprintf(
          '%s 1920w, %s 1200w, %s 768w',
          $hero_url,
          $large_url,
          $hero_mobile_url
        );

        // Add preload link element
        $attachments['#attached']['html_head_link'][][] = [
          'rel' => 'preload',
          'as' => 'image',
          'href' => $hero_url,
          'imagesrcset' => $srcset_value,
          'imagesizes' => '100vw',
          'fetchpriority' => 'high', // Signal high priority to browser
        ];
      }
    }
  }

  // Preconnect to external domains for faster resource loading
  // (Uncomment if using external resources)
  /*
  $attachments['#attached']['html_head_link'][][] = [
    'rel' => 'preconnect',
    'href' => 'https://fonts.googleapis.com',
    'crossorigin' => 'anonymous',
  ];
  */
}